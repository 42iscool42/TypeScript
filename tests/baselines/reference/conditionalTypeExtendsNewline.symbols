//// [tests/cases/compiler/conditionalTypeExtendsNewline.ts] ////

=== conditionalTypeExtendsNewline.ts ===
// Repro from #53589

type Example1 = string 
>Example1 : Symbol(Example1, Decl(conditionalTypeExtendsNewline.ts, 0, 0))

     extends string ? true : false;

type Example2 = `${string
>Example2 : Symbol(Example2, Decl(conditionalTypeExtendsNewline.ts, 3, 35))

     extends string ? true : false}`;

type Example3 = Array<string
>Example3 : Symbol(Example3, Decl(conditionalTypeExtendsNewline.ts, 6, 37))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

     extends string ? true : false>;

type Example4<K extends string
>Example4 : Symbol(Example4, Decl(conditionalTypeExtendsNewline.ts, 9, 36))
>K : Symbol(K, Decl(conditionalTypeExtendsNewline.ts, 11, 14))

     extends string ? true : false> = string;

type Example5<K = string
>Example5 : Symbol(Example5, Decl(conditionalTypeExtendsNewline.ts, 12, 45))
>K : Symbol(K, Decl(conditionalTypeExtendsNewline.ts, 14, 14))

     extends string ? true : false> = string;

function foo(a: string
>foo : Symbol(foo, Decl(conditionalTypeExtendsNewline.ts, 15, 45))
>a : Symbol(a, Decl(conditionalTypeExtendsNewline.ts, 17, 13))

     extends string ? true : false): void {};

type Example6<A> = {
>Example6 : Symbol(Example6, Decl(conditionalTypeExtendsNewline.ts, 18, 45))
>A : Symbol(A, Decl(conditionalTypeExtendsNewline.ts, 20, 14))

  foo: string
>foo : Symbol(foo, Decl(conditionalTypeExtendsNewline.ts, 20, 20))

     extends string ? true : false;
};
